/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    flavor = "balanced";
};

&sk {
    release-after-ms = <900>;
};

&sl {
    release-after-ms = <0>;
    ignore-modifiers;

    /delete-property/ quick-release;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <900>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Escape {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        Enter {
            bindings = <&kp KP_ENTER>;
            key-positions = <2 3>;
        };

        Pound {
            bindings = <&kp POUND>;
            key-positions = <2 12>;
        };

        At_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 11>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        Repeat {
            bindings = <&kp C_REPEAT>;
            key-positions = <12 13>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <12 22>;
        };

        Dot {
            bindings = <&kp PERIOD>;
            key-positions = <21 11>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <13 23>;
        };

        Copy {
            bindings = <&kp K_COPY>;
            key-positions = <21 22>;
        };

        Paste {
            bindings = <&kp K_PASTE>;
            key-positions = <22 23>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
        };

        Tiled {
            bindings = <&kp TILDE>;
            key-positions = <14 24>;
        };

        Backspace {
            bindings = <&kp BSPC>;
            key-positions = <7 6>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
        };

        Multiply {
            bindings = <&kp KP_ASTERISK>;
            key-positions = <7 17>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 18>;
        };

        Left_parentheses_hold_lesser {
            bindings = <&mt LESS_THAN LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        Right_parentheses_hold_greater {
            bindings = <&mt GREATER_THAN RIGHT_PARENTHESIS>;
            key-positions = <17 18>;
        };

        Slash {
            bindings = <&kp SLASH>;
            key-positions = <17 27>;
        };

        Subtract {
            bindings = <&kp KP_SUBTRACT>;
            key-positions = <16 26>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 28>;
        };

        Left_bracket_hold_Brace {
            bindings = <&mt LEFT_BRACE LEFT_BRACKET>;
            key-positions = <27 26>;
        };

        Right_Bracket_hold_Brace {
            bindings = <&mt RIGHT_BRACE RIGHT_BRACKET>;
            key-positions = <27 28>;
        };

        Catet {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
        };

        Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 25>;
        };
    };

    behaviors {
        Smart_Num: Smart_Num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&none>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <900>;
        };
        Smart_shift: Smart_shift_ {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT ";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q   &kp W        &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I                &kp O             &mt DOUBLE_QUOTES SQT
&kp A   &kp S        &kp D  &kp F  &kp G    &kp P  &kp H  &kp J                &kp K             &kp L
&kp Z   &kp X        &kp C  &kp V  &kp B    &kp N  &kp M  &mt SEMICOLON COMMA  &mt COLON PERIOD  &mt EXCLAMATION QUESTION
&tog 1  &lt 2 SPACE                                                            &Smart_Num 3 0    &Smart_shift
            >;
        };

        right_layer {
            bindings = <
&kp INS    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp PAGE_UP      &kp PAGE_UP    &kp BSPC        &kp UP_ARROW    &kp DEL           &none
&kp KP_N0  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp ENTER        &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW   &kp ENTER
&kp DEL    &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp PAGE_DOWN    &kp INS        &kp TAB         &kp LESS_THAN   &kp GREATER_THAN  &none
&trans     &trans                                                                                           &trans            &kp K_CANCEL
            >;
        };

        tri_layer {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &none    &trans  &kp C_PREV  &kp C_VOL_UP       &kp C_NEXT  &bl BL_TOG
&kp F11  &kp F4  &kp F5  &kp F6  &none    &trans  &trans      &kp C_VOLUME_DOWN  &trans      &bl BL_INC
&kp F10  &kp F1  &kp F2  &kp F3  &none    &trans  &bt BT_CLR  &bt BT_NXT         &bt BT_PRV  &bl BL_DEC
&trans   &trans                                                                  &kp C_MUTE  &kp C_PP
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &trans  &trans  &trans
&kp N0  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };
    };
};
