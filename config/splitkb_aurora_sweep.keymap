/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    flavor = "balanced";
};

&sk {
    release-after-ms = <900>;
};

&sl {
    ignore-modifiers;

    /delete-property/ quick-release;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <900>;
};

&caps_word {
    continue-list = <DELETE>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&Hml LCTRL BACKSPACE>;
            key-positions = <12 11>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        Pound {
            bindings = <&kp POUND>;
            key-positions = <2 12>;
            layers = <0 1 2>;
        };

        At_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 11>;
            layers = <0 1 2>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            layers = <0 1 2>;
        };

        Left_Brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
            layers = <0 1 2>;
        };

        Left_Enter {
            bindings = <&Hml RGUI ENTER>;
            key-positions = <13 14>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <12 22>;
            layers = <0 1 2>;
        };

        Dot {
            bindings = <&kp PERIOD>;
            key-positions = <21 11>;
            layers = <0 1 2>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <13 23>;
            layers = <0 1 2>;
        };

        Copy {
            bindings = <&kp K_COPY>;
            key-positions = <21 22>;
            layers = <0 1 2>;
        };

        Paste {
            bindings = <&kp K_PASTE>;
            key-positions = <22 23>;
            layers = <0 1 2>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
            layers = <0 1 2>;
        };

        Tiled {
            bindings = <&Tilde_Grave_Accent>;
            key-positions = <14 24>;
            layers = <0 1 2>;
        };

        Left_Backspace {
            bindings = <&Hmr RCTRL BACKSPACE>;
            key-positions = <17 18>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        Multiply {
            bindings = <&kp ASTRK>;
            key-positions = <7 17>;
            layers = <0 1 2>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            layers = <0 1 2>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 18>;
            layers = <0 1 2>;
        };

        L_parentheses_H_lesser {
            bindings = <&LParenthesis_Lesser>;
            key-positions = <6 7>;
            layers = <0 1 2>;
        };

        R_parentheses_H_greater {
            bindings = <&RParenthesis_Greater>;
            key-positions = <7 8>;
            layers = <0 1 2>;
        };

        Slash {
            bindings = <&kp SLASH>;
            key-positions = <17 27>;
            layers = <0 1 2>;
        };

        Subtract {
            bindings = <&kp MINUS>;
            key-positions = <16 26>;
            layers = <0 1 2>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 28>;
            layers = <0 1 2>;
        };

        Left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 26>;
            layers = <0 1 2>;
        };

        Right_Bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <27 28>;
            layers = <0 1 2>;
        };

        Catet {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
            layers = <0 1 2>;
        };

        Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 25>;
            layers = <0 1 2>;
        };

        Lshift {
            bindings = <&Hmr RSHIFT TAB>;
            key-positions = <10 11>;
        };

        Rshift {
            bindings = <&Hmr RSHFT TAB>;
            key-positions = <18 19>;
        };

        LCaps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <1 2 3>;
        };

        RCaps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <8 7 6>;
        };

        Left_Space {
            bindings = <&Hml LALT SPACE>;
            key-positions = <13 12>;
        };

        Right_Enter {
            bindings = <&Hmr RGUI ENTER>;
            key-positions = <16 15>;
        };

        Right_Brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <2 3>;
            layers = <0 1 2>;
        };

        Right_Space {
            bindings = <&Hmr RALT SPACE>;
            key-positions = <17 16>;
        };

        Left_num_lock {
            bindings = <&kp KP_NUMLOCK>;
            key-positions = <3 4>;
            layers = <1 5>;
        };

        Right_num_lock {
            bindings = <&kp KP_NUMLOCK>;
            key-positions = <5 6>;
            layers = <1 5>;
        };

        Mute {
            bindings = <&kp K_MUTE>;
            key-positions = <6 8>;
            layers = <1>;
        };

        Mute_2 {
            bindings = <&kp K_MUTE>;
            key-positions = <1 3>;
            layers = <5>;
        };

        Pound_2 {
            bindings = <&kp POUND>;
            key-positions = <7 17>;
            layers = <4 5>;
        };

        At_sign_2 {
            bindings = <&kp AT_SIGN>;
            key-positions = <8 18>;
            layers = <4 5>;
        };

        Dollar_2 {
            bindings = <&kp DOLLAR>;
            key-positions = <6 16>;
            layers = <4 5>;
        };

        Left_Brace_2 {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <6 7>;
            layers = <4 5>;
        };

        Right_Brace_2 {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 7>;
            layers = <3 5>;
        };

        Backslash_2 {
            bindings = <&kp BACKSLASH>;
            key-positions = <17 27>;
            layers = <4 5>;
        };

        Dot_2 {
            bindings = <&kp PERIOD>;
            key-positions = <18 28>;
            layers = <4 5>;
        };

        Equal_2 {
            bindings = <&kp EQUAL>;
            key-positions = <16 26>;
            layers = <4 5>;
        };

        Copy_2 {
            bindings = <&kp K_COPY>;
            key-positions = <27 28>;
            layers = <4 5>;
        };

        Paste_2 {
            bindings = <&kp K_PASTE>;
            key-positions = <26 27>;
            layers = <4 5>;
        };

        Percent_2 {
            bindings = <&kp PERCENT>;
            key-positions = <15 5>;
            layers = <4 5>;
        };

        Tiled_2 {
            bindings = <&Tilde_Grave_Accent>;
            key-positions = <15 25>;
            layers = <5 4>;
        };

        Multiply_2 {
            bindings = <&kp ASTERISK>;
            key-positions = <12 2>;
            layers = <4 5>;
        };

        Plus_2 {
            bindings = <&kp PLUS>;
            key-positions = <3 13>;
            layers = <4 5>;
        };

        Ampersand_2 {
            bindings = <&kp AMPERSAND>;
            key-positions = <1 11>;
            layers = <4 5>;
        };

        L_Parentheses_H_lesser_2 {
            bindings = <&LParenthesis_Lesser>;
            key-positions = <1 2>;
            layers = <4 5>;
        };

        R_Parentheses_H_lesser_2 {
            bindings = <&RParenthesis_Greater>;
            key-positions = <3 2>;
            layers = <4 5>;
        };

        Slash_2 {
            bindings = <&kp SLASH>;
            key-positions = <12 22>;
            layers = <4 5>;
        };

        Subtract_2 {
            bindings = <&kp MINUS>;
            key-positions = <13 23>;
            layers = <4 5>;
        };

        Pipe_2 {
            bindings = <&kp PIPE>;
            key-positions = <11 21>;
            layers = <4 5>;
        };

        Left_Bracket_2 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <21 22>;
            layers = <4 5>;
        };

        Right_Bracket_2 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <23 22>;
            layers = <4 5>;
        };

        Catet_2 {
            bindings = <&kp CARET>;
            key-positions = <4 14>;
            layers = <4 5>;
        };

        Underscore_2 {
            bindings = <&kp UNDERSCORE>;
            key-positions = <14 24>;
            layers = <4 5>;
        };

        Toggle_4_RH {
            bindings = <&tog 4>;
            key-positions = <32 33>;
            layers = <0 4>;
        };

        Toggle_5_LH {
            bindings = <&tog 5>;
            key-positions = <31 30>;
            layers = <1 5>;
        };

        Swap_left_to_right_RH {
            bindings = <&tog 4>;
            key-positions = <18 17 16 19>;
            layers = <0 4>;
        };

        Swap_left_to_right_LH {
            bindings = <&tog 4>;
            key-positions = <13 12 11 10>;
            layers = <0 4>;
        };

        Swap_left_to_right_RH_Nav1 {
            bindings = <&tog 5>;
            key-positions = <28 27 26 29>;
            layers = <1 5>;
        };

        Swap_left_to_right_LH_Nav1 {
            bindings = <&tog 5>;
            key-positions = <28 27 26 29>;
            layers = <1 5>;
        };

        Toggle_4_LH {
            bindings = <&tog 4>;
            key-positions = <31 30>;
            layers = <0 4>;
        };

        Toggle_4_RH {
            bindings = <&tog 5>;
            key-positions = <33 32>;
            layers = <1 5>;
        };
    };

    behaviors {
        Smart_Num: Smart_Num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&Num_dance>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <900>;
        };

        Num_dance: Num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DANCE";
            #binding-cells = <0>;
            bindings = <&sl 3>;
        };

        Hml: Hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <33 32>;
        };

        Hmr: Hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        Semicolon_Comma: Semicolon_Comma {
            compatible = "zmk,behavior-tap-dance";
            label = "SEMICOLON_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            tapping-term-ms = <500>;
        };

        Question_Exclamation: Question_Exclamation {
            compatible = "zmk,behavior-tap-dance";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            tapping-term-ms = <500>;
        };

        Smart_shift: Smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        Period_Colon: Period_Colon {
            compatible = "zmk,behavior-tap-dance";
            label = "PERIOD_COLON";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COLON>;

            tapping-term-ms = <500>;
        };

        SQT_Double_Quotes: SQT_Double_Quotes {
            compatible = "zmk,behavior-tap-dance";
            label = "SQT_DOUBLE_QUOTES";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DOUBLE_QUOTES>;

            tapping-term-ms = <500>;
        };

        RParenthesis_Greater: RParenthesis_Greater {
            compatible = "zmk,behavior-tap-dance";
            label = "RPARENTHESIS_GREATER";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            tapping-term-ms = <500>;
        };

        LParenthesis_Lesser: LParenthesis_Lesser {
            compatible = "zmk,behavior-tap-dance";
            label = "LPARENTHESIS_LESSER";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            tapping-term-ms = <500>;
        };

        Tilde_Grave_Accent: Tilde_Grave_Accent {
            compatible = "zmk,behavior-tap-dance";
            label = "TILDE_GRAVE_ACCENT";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp TILDE>, <&kp GRAVE>;
        };

        Delete_End: Delete_End {
            compatible = "zmk,behavior-tap-dance";
            label = "DELETE_END";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp DELETE>, <&kp END>;
        };

        Insert_Home: Insert_Home {
            compatible = "zmk,behavior-tap-dance";
            label = "INSERT_HOME";
            #binding-cells = <0>;
            bindings = <&kp INS>, <&kp HOME>;

            tapping-term-ms = <500>;
        };

        Smart_FX: Smart_FX {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_FX";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <900>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Zero {
            bindings = <
&kp Q   &kp W          &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I             &kp O               &kp P
&kp A   &kp S          &kp D  &kp F  &kp G    &kp H  &kp J  &kp K             &kp L               &Period_Colon
&kp Z   &kp X          &kp C  &kp V  &kp B    &kp N  &kp M  &Semicolon_Comma  &SQT_Double_Quotes  &Question_Exclamation
&tog 1  &Smart_FX 2 2                                                         &Smart_FX 2 3       &Smart_shift
            >;
        };

        Nav {
            bindings = <
&Delete_End   &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp PAGE_UP      &kp PAGE_UP   &kp K_VOL_UP    &kp UP_ARROW    &kp K_VOL_DN      &Delete_End
&kp KP_N0     &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_ENTER     &kp KP_ENTER  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW   &kp PAUSE_BREAK
&Insert_Home  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp PAGE_DOWN    &kp PG_DN     &kp K_CANCEL    &kp LESS_THAN   &kp GREATER_THAN  &Insert_Home
&trans        &trans                                                                                          &trans            &trans
            >;
        };

        Fin {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &none    &bl BL_TOG  &kp K_NEXT  &kp K_VOLUME_UP    &kp C_NEXT      &kt K_PLAY_PAUSE
&kp F11  &kp F4  &kp F5  &kp F6  &none    &bl BL_INC  &kp K_NEXT  &kp K_VOLUME_DOWN  &kp K_PREVIOUS  &kp K_MUTE
&kp F10  &kp F1  &kp F2  &kp F3  &none    &bl BL_DEC  &bt BT_CLR  &bt BT_NXT         &bt BT_PRV      &kp K_REFRESH
&trans   &trans                                                                      &trans          &trans
            >;
        };

        Smart_Num {
            bindings = <
&trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans
&kp N0  &kp N4  &kp N5  &kp N6  &trans    &kp N0  &kp N4  &kp N5  &kp N6  &trans
&trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans
&trans  &trans                                                    &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&kp P                  &kp O               &kp I             &kp U  &kp Y    &kp T  &kp R  &kp E  &kp W          &kp Q
&Period_Colon          &kp L               &kp K             &kp J  &kp H    &kp G  &kp F  &kp D  &kp S          &kp A
&Question_Exclamation  &SQT_Double_Quotes  &Semicolon_Comma  &kp M  &kp N    &kp B  &kp V  &kp C  &kp X          &kp Z
&Smart_shift           &Smart_FX 2 3                                                              &Smart_FX 2 3  &tog 1
            >;
        };

        layer_5 {
            bindings = <
&Delete_End      &kp K_VOL_DN    &kp UP_ARROW      &kp K_VOL_UP     &kp PG_UP        &kp PG_UP  &kp KP_N9  &kp KP_N8  &kp KP_N7  &Delete_End
&kp PAUSE_BREAK  &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp ENTER        &kp ENTER  &kp KP_N6  &kp KP_N5  &kp KP_N4  &kp KP_N0
&Insert_Home     &kp LESS_THAN   &kp GREATER_THAN  &kp K_CANCEL     &kp PAGE_DOWN    &kp PG_DN  &kp KP_N7  &kp KP_N2  &kp KP_N1  &Insert_Home
&trans           &trans                                                                                               &trans     &trans
            >;
        };
    };
};
